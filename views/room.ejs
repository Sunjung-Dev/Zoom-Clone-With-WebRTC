<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <script>
    const ROOM_ID = "<%= roomId %>"
  </script>
  <script defer src="https://unpkg.com/peerjs@1.2.0/dist/peerjs.min.js"></script>
  <script src="/socket.io/socket.io.js" defer></script>
  <script src="script.js" defer></script>
  <script src="http://code.jquery.com/jquery-latest.js"></script>
  <title>Document</title>
  <style>
    #video-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, 300px);
      grid-auto-rows: 300px;
    }
    
    video {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
  </style>
</head>
<body>
  <div id="video-grid"></div>
  <button id = "start">Start</button>
  <button id = "stop">Stop</button>
  <div id="completed"></div>
  <textarea id = "result" rows="8" cols="80"></textarea> <br>
  <script type="text/javascript">
	  var startButton = document.getElementById('start');
	  var stopButton = document.getElementById('stop');
	  var resultElement = document.getElementById('result');
	  var recognition = new webkitSpeechRecognition();
	  var conversationDictObject = [];

	  recognition.lang = window.navigator.language;
	  recognition.interimResults = false;
	  recognition.continuous = true;
	  startButton.addEventListener('click', () => { recognition.start(); });
	  stopButton.addEventListener('click', () => { 
		 var json = { ... conversationDictObject};
		 console.log(json)
		 $.ajax({
                                                type:'post',
                                                url:'/api/chat-gpt',
                                                data: json,
                                                dataType:'json',
                                                error:function(){
                                                        console.log('error');
                                                },
                                                success:function(data){
							console.log("successed")
                                                        $('#completed').append("ok!!!! ");
                                                }
                                        });
		 recognition.stop(); });
	  recognition.addEventListener('result', (event) => {
	  console.log(event.results[event.results.length - 1][0].confidence)
		  if (event.results[event.results.length - 1][0].confidence >= 0.77){
			  const result = event.results[event.results.length - 1][0].transcript;
			  if (result.includes(conversationDictObject[conversationDictObject.length-1])){
				  const idx = conversationDictObject.indexOf(conversationDictObject[conversationDictObject.length-1])
				  if (idx > -1) conversationDictObject.splice(idx, 1)
			  }
			  if (result != conversationDictObject[conversationDictObject.length-1]){
				  console.log(conversationDictObject.length-1)
				  conversationDictObject.push(result)
			          console.log(conversationDictObject)
				  resultElement.textContent = result;
			  } 
		  } 
	  });
 </script>
</body>
</html>
